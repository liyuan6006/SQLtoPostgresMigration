// <auto-generated />
using System;
using EFDBfirst.Models.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeFirsttoPostgres.Data.Migrations
{
    [DbContext(typeof(AdventureWorksDw2022Context))]
    partial class AdventureWorksDw2022ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DatabaseLog", b =>
                {
                    b.Property<int>("DatabaseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DatabaseLogId"));

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Object")
                        .HasColumnType("text");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Schema")
                        .HasColumnType("text");

                    b.Property<string>("Tsql")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XmlEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DatabaseLogId");

                    b.ToTable("DatabaseLogs");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimAccount", b =>
                {
                    b.Property<int>("AccountKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountKey"));

                    b.Property<int?>("AccountCodeAlternateKey")
                        .HasColumnType("integer");

                    b.Property<string>("AccountDescription")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<string>("CustomMemberOptions")
                        .HasColumnType("text");

                    b.Property<string>("CustomMembers")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<int?>("ParentAccountCodeAlternateKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentAccountKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentAccountKeyNavigationAccountKey")
                        .HasColumnType("integer");

                    b.Property<string>("ValueType")
                        .HasColumnType("text");

                    b.HasKey("AccountKey");

                    b.HasIndex("ParentAccountKeyNavigationAccountKey");

                    b.ToTable("DimAccounts");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimCurrency", b =>
                {
                    b.Property<int>("CurrencyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyKey"));

                    b.Property<string>("CurrencyAlternateKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CurrencyKey");

                    b.ToTable("DimCurrencies");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimCustomer", b =>
                {
                    b.Property<int>("CustomerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerKey"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CommuteDistance")
                        .HasColumnType("text");

                    b.Property<string>("CustomerAlternateKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateFirstPurchase")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("EnglishEducation")
                        .HasColumnType("text");

                    b.Property<string>("EnglishOccupation")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FrenchEducation")
                        .HasColumnType("text");

                    b.Property<string>("FrenchOccupation")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("GeographyKey")
                        .HasColumnType("integer");

                    b.Property<int?>("GeographyKeyNavigationGeographyKey")
                        .HasColumnType("integer");

                    b.Property<string>("HouseOwnerFlag")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<bool?>("NameStyle")
                        .HasColumnType("boolean");

                    b.Property<byte?>("NumberCarsOwned")
                        .HasColumnType("smallint");

                    b.Property<byte?>("NumberChildrenAtHome")
                        .HasColumnType("smallint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("SpanishEducation")
                        .HasColumnType("text");

                    b.Property<string>("SpanishOccupation")
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<byte?>("TotalChildren")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("YearlyIncome")
                        .HasColumnType("numeric");

                    b.HasKey("CustomerKey");

                    b.HasIndex("GeographyKeyNavigationGeographyKey");

                    b.ToTable("DimCustomers");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimDate", b =>
                {
                    b.Property<int>("DateKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DateKey"));

                    b.Property<byte>("CalendarQuarter")
                        .HasColumnType("smallint");

                    b.Property<byte>("CalendarSemester")
                        .HasColumnType("smallint");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("DayNumberOfMonth")
                        .HasColumnType("smallint");

                    b.Property<byte>("DayNumberOfWeek")
                        .HasColumnType("smallint");

                    b.Property<short>("DayNumberOfYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EnglishDayNameOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnglishMonthName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("FiscalQuarter")
                        .HasColumnType("smallint");

                    b.Property<byte>("FiscalSemester")
                        .HasColumnType("smallint");

                    b.Property<short>("FiscalYear")
                        .HasColumnType("smallint");

                    b.Property<string>("FrenchDayNameOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrenchMonthName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("FullDateAlternateKey")
                        .HasColumnType("date");

                    b.Property<byte>("MonthNumberOfYear")
                        .HasColumnType("smallint");

                    b.Property<string>("SpanishDayNameOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpanishMonthName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("WeekNumberOfYear")
                        .HasColumnType("smallint");

                    b.HasKey("DateKey");

                    b.ToTable("DimDates");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimDepartmentGroup", b =>
                {
                    b.Property<int>("DepartmentGroupKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentGroupKey"));

                    b.Property<string>("DepartmentGroupName")
                        .HasColumnType("text");

                    b.Property<int?>("ParentDepartmentGroupKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentDepartmentGroupKeyNavigationDepartmentGroupKey")
                        .HasColumnType("integer");

                    b.HasKey("DepartmentGroupKey");

                    b.HasIndex("ParentDepartmentGroupKeyNavigationDepartmentGroupKey");

                    b.ToTable("DimDepartmentGroups");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimEmployee", b =>
                {
                    b.Property<int>("EmployeeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeKey"));

                    b.Property<decimal?>("BaseRate")
                        .HasColumnType("numeric");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<bool>("CurrentFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNationalIdalternateKey")
                        .HasColumnType("text");

                    b.Property<byte[]>("EmployeePhoto")
                        .HasColumnType("bytea");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginId")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentEmployeeKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentEmployeeKeyNavigationEmployeeKey")
                        .HasColumnType("integer");

                    b.Property<string>("ParentEmployeeNationalIdalternateKey")
                        .HasColumnType("text");

                    b.Property<byte?>("PayFrequency")
                        .HasColumnType("smallint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<bool?>("SalariedFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("SalesPersonFlag")
                        .HasColumnType("boolean");

                    b.Property<int?>("SalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesTerritoryKeyNavigationSalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<short?>("SickLeaveHours")
                        .HasColumnType("smallint");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<short?>("VacationHours")
                        .HasColumnType("smallint");

                    b.HasKey("EmployeeKey");

                    b.HasIndex("ParentEmployeeKeyNavigationEmployeeKey");

                    b.HasIndex("SalesTerritoryKeyNavigationSalesTerritoryKey");

                    b.ToTable("DimEmployees");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimGeography", b =>
                {
                    b.Property<int>("GeographyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeographyKey"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("text");

                    b.Property<string>("EnglishCountryRegionName")
                        .HasColumnType("text");

                    b.Property<string>("FrenchCountryRegionName")
                        .HasColumnType("text");

                    b.Property<string>("IpAddressLocator")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int?>("SalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesTerritoryKeyNavigationSalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<string>("SpanishCountryRegionName")
                        .HasColumnType("text");

                    b.Property<string>("StateProvinceCode")
                        .HasColumnType("text");

                    b.Property<string>("StateProvinceName")
                        .HasColumnType("text");

                    b.HasKey("GeographyKey");

                    b.HasIndex("SalesTerritoryKeyNavigationSalesTerritoryKey");

                    b.ToTable("DimGeographies");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimOrganization", b =>
                {
                    b.Property<int>("OrganizationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganizationKey"));

                    b.Property<int?>("CurrencyKey")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrencyKeyNavigationCurrencyKey")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<int?>("ParentOrganizationKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentOrganizationKeyNavigationOrganizationKey")
                        .HasColumnType("integer");

                    b.Property<string>("PercentageOfOwnership")
                        .HasColumnType("text");

                    b.HasKey("OrganizationKey");

                    b.HasIndex("CurrencyKeyNavigationCurrencyKey");

                    b.HasIndex("ParentOrganizationKeyNavigationOrganizationKey");

                    b.ToTable("DimOrganizations");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimProduct", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductKey"));

                    b.Property<string>("ArabicDescription")
                        .HasColumnType("text");

                    b.Property<string>("ChineseDescription")
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DaysToManufacture")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DealerPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("text");

                    b.Property<string>("EnglishProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FinishedGoodsFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("FrenchDescription")
                        .HasColumnType("text");

                    b.Property<string>("FrenchProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GermanDescription")
                        .HasColumnType("text");

                    b.Property<string>("HebrewDescription")
                        .HasColumnType("text");

                    b.Property<string>("JapaneseDescription")
                        .HasColumnType("text");

                    b.Property<byte[]>("LargePhoto")
                        .HasColumnType("bytea");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ModelName")
                        .HasColumnType("text");

                    b.Property<string>("ProductAlternateKey")
                        .HasColumnType("text");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text");

                    b.Property<int?>("ProductSubcategoryKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductSubcategoryKeyNavigationProductSubcategoryKey")
                        .HasColumnType("integer");

                    b.Property<short?>("ReorderPoint")
                        .HasColumnType("smallint");

                    b.Property<short?>("SafetyStockLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("SizeRange")
                        .HasColumnType("text");

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasColumnType("text");

                    b.Property<string>("SpanishProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("StandardCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<string>("ThaiDescription")
                        .HasColumnType("text");

                    b.Property<string>("TurkishDescription")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasColumnType("text");

                    b.HasKey("ProductKey");

                    b.HasIndex("ProductSubcategoryKeyNavigationProductSubcategoryKey");

                    b.ToTable("DimProducts");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductCategoryKey"));

                    b.Property<string>("EnglishProductCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrenchProductCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductCategoryAlternateKey")
                        .HasColumnType("integer");

                    b.Property<string>("SpanishProductCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductCategoryKey");

                    b.ToTable("DimProductCategories");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductSubcategoryKey"));

                    b.Property<string>("EnglishProductSubcategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrenchProductSubcategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductCategoryKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductCategoryKeyNavigationProductCategoryKey")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductSubcategoryAlternateKey")
                        .HasColumnType("integer");

                    b.Property<string>("SpanishProductSubcategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductSubcategoryKey");

                    b.HasIndex("ProductCategoryKeyNavigationProductCategoryKey");

                    b.ToTable("DimProductSubcategories");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimPromotion", b =>
                {
                    b.Property<int>("PromotionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromotionKey"));

                    b.Property<double?>("DiscountPct")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnglishPromotionCategory")
                        .HasColumnType("text");

                    b.Property<string>("EnglishPromotionName")
                        .HasColumnType("text");

                    b.Property<string>("EnglishPromotionType")
                        .HasColumnType("text");

                    b.Property<string>("FrenchPromotionCategory")
                        .HasColumnType("text");

                    b.Property<string>("FrenchPromotionName")
                        .HasColumnType("text");

                    b.Property<string>("FrenchPromotionType")
                        .HasColumnType("text");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("integer");

                    b.Property<int?>("MinQty")
                        .HasColumnType("integer");

                    b.Property<int?>("PromotionAlternateKey")
                        .HasColumnType("integer");

                    b.Property<string>("SpanishPromotionCategory")
                        .HasColumnType("text");

                    b.Property<string>("SpanishPromotionName")
                        .HasColumnType("text");

                    b.Property<string>("SpanishPromotionType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PromotionKey");

                    b.ToTable("DimPromotions");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimReseller", b =>
                {
                    b.Property<int>("ResellerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResellerKey"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AnnualSales")
                        .HasColumnType("numeric");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FirstOrderYear")
                        .HasColumnType("integer");

                    b.Property<int?>("GeographyKey")
                        .HasColumnType("integer");

                    b.Property<int?>("GeographyKeyNavigationGeographyKey")
                        .HasColumnType("integer");

                    b.Property<int?>("LastOrderYear")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinPaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<byte?>("MinPaymentType")
                        .HasColumnType("smallint");

                    b.Property<int?>("NumberEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("OrderFrequency")
                        .HasColumnType("text");

                    b.Property<byte?>("OrderMonth")
                        .HasColumnType("smallint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text");

                    b.Property<string>("ResellerAlternateKey")
                        .HasColumnType("text");

                    b.Property<string>("ResellerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("YearOpened")
                        .HasColumnType("integer");

                    b.HasKey("ResellerKey");

                    b.HasIndex("GeographyKeyNavigationGeographyKey");

                    b.ToTable("DimResellers");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimSalesReason", b =>
                {
                    b.Property<int>("SalesReasonKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesReasonKey"));

                    b.Property<int>("SalesReasonAlternateKey")
                        .HasColumnType("integer");

                    b.Property<string>("SalesReasonName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReasonReasonType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SalesReasonKey");

                    b.ToTable("DimSalesReasons");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimSalesTerritory", b =>
                {
                    b.Property<int>("SalesTerritoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesTerritoryKey"));

                    b.Property<int?>("SalesTerritoryAlternateKey")
                        .HasColumnType("integer");

                    b.Property<string>("SalesTerritoryCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesTerritoryGroup")
                        .HasColumnType("text");

                    b.Property<byte[]>("SalesTerritoryImage")
                        .HasColumnType("bytea");

                    b.Property<string>("SalesTerritoryRegion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SalesTerritoryKey");

                    b.ToTable("DimSalesTerritories");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimScenario", b =>
                {
                    b.Property<int>("ScenarioKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScenarioKey"));

                    b.Property<string>("ScenarioName")
                        .HasColumnType("text");

                    b.HasKey("ScenarioKey");

                    b.ToTable("DimScenarios");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactAdditionalInternationalProductDescription", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductKey"));

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductKey");

                    b.ToTable("FactAdditionalInternationalProductDescriptions");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactCallCenter", b =>
                {
                    b.Property<int>("FactCallCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FactCallCenterId"));

                    b.Property<int>("AutomaticResponses")
                        .HasColumnType("integer");

                    b.Property<short>("AverageTimePerIssue")
                        .HasColumnType("smallint");

                    b.Property<int>("Calls")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<short>("IssuesRaised")
                        .HasColumnType("smallint");

                    b.Property<short>("LevelOneOperators")
                        .HasColumnType("smallint");

                    b.Property<short>("LevelTwoOperators")
                        .HasColumnType("smallint");

                    b.Property<int>("Orders")
                        .HasColumnType("integer");

                    b.Property<double>("ServiceGrade")
                        .HasColumnType("double precision");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("TotalOperators")
                        .HasColumnType("smallint");

                    b.Property<string>("WageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FactCallCenterId");

                    b.HasIndex("DateKeyNavigationDateKey");

                    b.ToTable("FactCallCenters");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactCurrencyRate", b =>
                {
                    b.Property<int>("CurrencyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyKey"));

                    b.Property<double>("AverageRate")
                        .HasColumnType("double precision");

                    b.Property<int>("CurrencyKeyNavigationCurrencyKey")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<double>("EndOfDayRate")
                        .HasColumnType("double precision");

                    b.HasKey("CurrencyKey");

                    b.HasIndex("CurrencyKeyNavigationCurrencyKey");

                    b.HasIndex("DateKeyNavigationDateKey");

                    b.ToTable("FactCurrencyRates");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactFinance", b =>
                {
                    b.Property<int>("FinanceKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FinanceKey"));

                    b.Property<int>("AccountKey")
                        .HasColumnType("integer");

                    b.Property<int>("AccountKeyNavigationAccountKey")
                        .HasColumnType("integer");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentGroupKey")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentGroupKeyNavigationDepartmentGroupKey")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationKey")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationKeyNavigationOrganizationKey")
                        .HasColumnType("integer");

                    b.Property<int>("ScenarioKey")
                        .HasColumnType("integer");

                    b.Property<int>("ScenarioKeyNavigationScenarioKey")
                        .HasColumnType("integer");

                    b.HasKey("FinanceKey");

                    b.HasIndex("AccountKeyNavigationAccountKey");

                    b.HasIndex("DateKeyNavigationDateKey");

                    b.HasIndex("DepartmentGroupKeyNavigationDepartmentGroupKey");

                    b.HasIndex("OrganizationKeyNavigationOrganizationKey");

                    b.HasIndex("ScenarioKeyNavigationScenarioKey");

                    b.ToTable("FactFinances");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactInternetSale", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductKey"));

                    b.Property<string>("CarrierTrackingNumber")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyKey")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyKeyNavigationCurrencyKey")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerKey")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerKeyNavigationCustomerKey")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerPonumber")
                        .HasColumnType("text");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DueDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DueDateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<decimal>("ExtendedAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Freight")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("OrderDateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<short>("OrderQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductKeyNavigationProductKey")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProductStandardCost")
                        .HasColumnType("numeric");

                    b.Property<int>("PromotionKey")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionKeyNavigationPromotionKey")
                        .HasColumnType("integer");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SalesAmount")
                        .HasColumnType("numeric");

                    b.Property<byte>("SalesOrderLineNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<int>("SalesTerritoryKeyNavigationSalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShipDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("ShipDateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalProductCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<double>("UnitPriceDiscountPct")
                        .HasColumnType("double precision");

                    b.HasKey("ProductKey");

                    b.HasIndex("CurrencyKeyNavigationCurrencyKey");

                    b.HasIndex("CustomerKeyNavigationCustomerKey");

                    b.HasIndex("DueDateKeyNavigationDateKey");

                    b.HasIndex("OrderDateKeyNavigationDateKey");

                    b.HasIndex("ProductKeyNavigationProductKey");

                    b.HasIndex("PromotionKeyNavigationPromotionKey");

                    b.HasIndex("SalesTerritoryKeyNavigationSalesTerritoryKey");

                    b.HasIndex("ShipDateKeyNavigationDateKey");

                    b.ToTable("FactInternetSales");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactProductInventory", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductKey"));

                    b.Property<int>("DateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("MovementDate")
                        .HasColumnType("date");

                    b.Property<int>("ProductKeyNavigationProductKey")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric");

                    b.Property<int>("UnitsBalance")
                        .HasColumnType("integer");

                    b.Property<int>("UnitsIn")
                        .HasColumnType("integer");

                    b.Property<int>("UnitsOut")
                        .HasColumnType("integer");

                    b.HasKey("ProductKey");

                    b.HasIndex("DateKeyNavigationDateKey");

                    b.HasIndex("ProductKeyNavigationProductKey");

                    b.ToTable("FactProductInventories");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactResellerSale", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductKey"));

                    b.Property<string>("CarrierTrackingNumber")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyKey")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyKeyNavigationCurrencyKey")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerPonumber")
                        .HasColumnType("text");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DueDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DueDateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeKey")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeKeyNavigationEmployeeKey")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ExtendedAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("OrderDateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<short?>("OrderQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductKeyNavigationProductKey")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ProductStandardCost")
                        .HasColumnType("numeric");

                    b.Property<int>("PromotionKey")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionKeyNavigationPromotionKey")
                        .HasColumnType("integer");

                    b.Property<int>("ResellerKey")
                        .HasColumnType("integer");

                    b.Property<int>("ResellerKeyNavigationResellerKey")
                        .HasColumnType("integer");

                    b.Property<byte?>("RevisionNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SalesAmount")
                        .HasColumnType("numeric");

                    b.Property<byte>("SalesOrderLineNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<int>("SalesTerritoryKeyNavigationSalesTerritoryKey")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShipDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("ShipDateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TaxAmt")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalProductCost")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<double?>("UnitPriceDiscountPct")
                        .HasColumnType("double precision");

                    b.HasKey("ProductKey");

                    b.HasIndex("CurrencyKeyNavigationCurrencyKey");

                    b.HasIndex("DueDateKeyNavigationDateKey");

                    b.HasIndex("EmployeeKeyNavigationEmployeeKey");

                    b.HasIndex("OrderDateKeyNavigationDateKey");

                    b.HasIndex("ProductKeyNavigationProductKey");

                    b.HasIndex("PromotionKeyNavigationPromotionKey");

                    b.HasIndex("ResellerKeyNavigationResellerKey");

                    b.HasIndex("SalesTerritoryKeyNavigationSalesTerritoryKey");

                    b.HasIndex("ShipDateKeyNavigationDateKey");

                    b.ToTable("FactResellerSales");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactSalesQuotum", b =>
                {
                    b.Property<int>("SalesQuotaKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesQuotaKey"));

                    b.Property<byte>("CalendarQuarter")
                        .HasColumnType("smallint");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeKey")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeKeyNavigationEmployeeKey")
                        .HasColumnType("integer");

                    b.Property<decimal>("SalesAmountQuota")
                        .HasColumnType("numeric");

                    b.HasKey("SalesQuotaKey");

                    b.HasIndex("DateKeyNavigationDateKey");

                    b.HasIndex("EmployeeKeyNavigationEmployeeKey");

                    b.ToTable("FactSalesQuota");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactSurveyResponse", b =>
                {
                    b.Property<int>("SurveyResponseKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SurveyResponseKey"));

                    b.Property<int>("CustomerKey")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerKeyNavigationCustomerKey")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DateKey")
                        .HasColumnType("integer");

                    b.Property<int>("DateKeyNavigationDateKey")
                        .HasColumnType("integer");

                    b.Property<string>("EnglishProductCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnglishProductSubcategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductCategoryKey")
                        .HasColumnType("integer");

                    b.Property<int>("ProductSubcategoryKey")
                        .HasColumnType("integer");

                    b.HasKey("SurveyResponseKey");

                    b.HasIndex("CustomerKeyNavigationCustomerKey");

                    b.HasIndex("DateKeyNavigationDateKey");

                    b.ToTable("FactSurveyResponses");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.NewFactCurrencyRate", b =>
                {
                    b.Property<float?>("AverageRate")
                        .HasColumnType("real");

                    b.Property<DateOnly?>("CurrencyDate")
                        .HasColumnType("date");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<int?>("CurrencyKey")
                        .HasColumnType("integer");

                    b.Property<int?>("DateKey")
                        .HasColumnType("integer");

                    b.Property<float?>("EndOfDayRate")
                        .HasColumnType("real");

                    b.HasKey("AverageRate");

                    b.ToTable("NewFactCurrencyRates");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.ProspectiveBuyer", b =>
                {
                    b.Property<int>("ProspectiveBuyerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProspectiveBuyerKey"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("HouseOwnerFlag")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<byte?>("NumberCarsOwned")
                        .HasColumnType("smallint");

                    b.Property<byte?>("NumberChildrenAtHome")
                        .HasColumnType("smallint");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("ProspectAlternateKey")
                        .HasColumnType("text");

                    b.Property<string>("Salutation")
                        .HasColumnType("text");

                    b.Property<string>("StateProvinceCode")
                        .HasColumnType("text");

                    b.Property<byte?>("TotalChildren")
                        .HasColumnType("smallint");

                    b.Property<int?>("Unknown")
                        .HasColumnType("integer");

                    b.Property<decimal?>("YearlyIncome")
                        .HasColumnType("numeric");

                    b.HasKey("ProspectiveBuyerKey");

                    b.ToTable("ProspectiveBuyers");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimAccount", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimAccount", "ParentAccountKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ParentAccountKeyNavigationAccountKey");

                    b.Navigation("ParentAccountKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimCustomer", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimGeography", "GeographyKeyNavigation")
                        .WithMany()
                        .HasForeignKey("GeographyKeyNavigationGeographyKey");

                    b.Navigation("GeographyKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimDepartmentGroup", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDepartmentGroup", "ParentDepartmentGroupKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentGroupKeyNavigationDepartmentGroupKey");

                    b.Navigation("ParentDepartmentGroupKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimEmployee", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimEmployee", "ParentEmployeeKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ParentEmployeeKeyNavigationEmployeeKey");

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany()
                        .HasForeignKey("SalesTerritoryKeyNavigationSalesTerritoryKey");

                    b.Navigation("ParentEmployeeKeyNavigation");

                    b.Navigation("SalesTerritoryKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimGeography", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany()
                        .HasForeignKey("SalesTerritoryKeyNavigationSalesTerritoryKey");

                    b.Navigation("SalesTerritoryKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimOrganization", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany()
                        .HasForeignKey("CurrencyKeyNavigationCurrencyKey");

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimOrganization", "ParentOrganizationKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ParentOrganizationKeyNavigationOrganizationKey");

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("ParentOrganizationKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimProduct", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimProductSubcategory", "ProductSubcategoryKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ProductSubcategoryKeyNavigationProductSubcategoryKey");

                    b.Navigation("ProductSubcategoryKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimProductSubcategory", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimProductCategory", "ProductCategoryKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ProductCategoryKeyNavigationProductCategoryKey");

                    b.Navigation("ProductCategoryKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.DimReseller", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimGeography", "GeographyKeyNavigation")
                        .WithMany()
                        .HasForeignKey("GeographyKeyNavigationGeographyKey");

                    b.Navigation("GeographyKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactCallCenter", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactCurrencyRate", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany()
                        .HasForeignKey("CurrencyKeyNavigationCurrencyKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("DateKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactFinance", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimAccount", "AccountKeyNavigation")
                        .WithMany()
                        .HasForeignKey("AccountKeyNavigationAccountKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDepartmentGroup", "DepartmentGroupKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DepartmentGroupKeyNavigationDepartmentGroupKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimOrganization", "OrganizationKeyNavigation")
                        .WithMany()
                        .HasForeignKey("OrganizationKeyNavigationOrganizationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimScenario", "ScenarioKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ScenarioKeyNavigationScenarioKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountKeyNavigation");

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("DepartmentGroupKeyNavigation");

                    b.Navigation("OrganizationKeyNavigation");

                    b.Navigation("ScenarioKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactInternetSale", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany()
                        .HasForeignKey("CurrencyKeyNavigationCurrencyKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimCustomer", "CustomerKeyNavigation")
                        .WithMany()
                        .HasForeignKey("CustomerKeyNavigationCustomerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DueDateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DueDateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "OrderDateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("OrderDateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimProduct", "ProductKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ProductKeyNavigationProductKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimPromotion", "PromotionKeyNavigation")
                        .WithMany()
                        .HasForeignKey("PromotionKeyNavigationPromotionKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany()
                        .HasForeignKey("SalesTerritoryKeyNavigationSalesTerritoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "ShipDateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ShipDateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("CustomerKeyNavigation");

                    b.Navigation("DueDateKeyNavigation");

                    b.Navigation("OrderDateKeyNavigation");

                    b.Navigation("ProductKeyNavigation");

                    b.Navigation("PromotionKeyNavigation");

                    b.Navigation("SalesTerritoryKeyNavigation");

                    b.Navigation("ShipDateKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactProductInventory", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimProduct", "ProductKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ProductKeyNavigationProductKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("ProductKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactResellerSale", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany()
                        .HasForeignKey("CurrencyKeyNavigationCurrencyKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DueDateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DueDateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimEmployee", "EmployeeKeyNavigation")
                        .WithMany()
                        .HasForeignKey("EmployeeKeyNavigationEmployeeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "OrderDateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("OrderDateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimProduct", "ProductKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ProductKeyNavigationProductKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimPromotion", "PromotionKeyNavigation")
                        .WithMany()
                        .HasForeignKey("PromotionKeyNavigationPromotionKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimReseller", "ResellerKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ResellerKeyNavigationResellerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany()
                        .HasForeignKey("SalesTerritoryKeyNavigationSalesTerritoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "ShipDateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ShipDateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("DueDateKeyNavigation");

                    b.Navigation("EmployeeKeyNavigation");

                    b.Navigation("OrderDateKeyNavigation");

                    b.Navigation("ProductKeyNavigation");

                    b.Navigation("PromotionKeyNavigation");

                    b.Navigation("ResellerKeyNavigation");

                    b.Navigation("SalesTerritoryKeyNavigation");

                    b.Navigation("ShipDateKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactSalesQuotum", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimEmployee", "EmployeeKeyNavigation")
                        .WithMany()
                        .HasForeignKey("EmployeeKeyNavigationEmployeeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("EmployeeKeyNavigation");
                });

            modelBuilder.Entity("EFDBfirst.Models.EntityFramework.FactSurveyResponse", b =>
                {
                    b.HasOne("EFDBfirst.Models.EntityFramework.DimCustomer", "CustomerKeyNavigation")
                        .WithMany()
                        .HasForeignKey("CustomerKeyNavigationCustomerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDBfirst.Models.EntityFramework.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKeyNavigationDateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerKeyNavigation");

                    b.Navigation("DateKeyNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
